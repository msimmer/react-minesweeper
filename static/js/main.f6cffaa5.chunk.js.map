{"version":3,"sources":["constants.tsx","Header.tsx","Board.tsx","Toolbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["statuses","READY","WIN","LOSE","modals","NONE","OPTIONS","ABOUT","levels","EASY","MEDIUM","HARD","BEAST","toHuman","num","0","1","2","3","4","5","6","7","8","9","Screen","props","nums","String","count","split","map","react_default","a","createElement","className","i","key","concat","Header","flags","status","time","padStart","Header_Screen","onClick","handleReset","Text","Fragment","column","show","edges","bomb","flag","Board","src_Header_0","bombs","rows","row","j","handleClick","classNames","inactive","Board_Text","titleCase","str","toUpperCase","slice","toLowerCase","ListItem","htmlFor","value","checked","level","onChange","handleChange","id","name","type","Toolbar","toggleModal","target","title","href","src","alt","visible","modal","style","left","Object","keys","value_","Toolbar_ListItem","random","min","max","min_","Math","ceil","max_","floor","MineSweeper","state","defaultProps","getTime","_this$state","_this","start","timer","Date","now","setState","window","setInterval","bind","assertThisInitialized","stop","clearInterval","setRegion","_ref","region","_ref2","slicedToArray","col","node","regionBlank","coords","matrix","shift","assign","regionEdge","getRegions","size","length","_loop","reduce","acc1","curr1","acc2","curr2","values","acc","curr","reset","_this$state2","getRows","bbbv","objectSpread","setBombs","current","exists","reveal","columns","Array","push","die","win","_ref3","_ref4","hidden","_ref5","_ref6","blank","_ref7","_ref8","edge","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","conditional","_ref15","callback","_ref16","call","indices","_indices","validate","_this$state3","revealed","pow","e","cloneDeep","_this$state4","_indices2","_this$start","shiftKey","flagged","modal_","currentTarget","offsetLeft","Number","this","_this$state5","src_Toolbar","src_Board","React","Component","undefined","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6cffaa5.chunk.js","sourcesContent":["import { StatusIndex, ModalIndex, LevelIndex, Level } from './types'\n\nexport const statuses: { [k in StatusIndex]: number } = {\n  READY: 0,\n  WIN: 1,\n  LOSE: 2,\n}\n\nexport const modals: { [k in ModalIndex]: number } = {\n  NONE: 0,\n  OPTIONS: 1,\n  ABOUT: 2,\n}\n\nexport const levels: { [k in LevelIndex]: number } = {\n  EASY: 0,\n  MEDIUM: 1,\n  HARD: 2,\n  BEAST: 3,\n}\n","import React from 'react'\nimport { Status } from './types'\nimport { statuses } from './constants'\nimport './Header.css'\n\nconst toHuman = (num: string): string => {\n  const nums: { [key: string]: string } = {\n    '0': 'zero',\n    '1': 'one',\n    '2': 'two',\n    '3': 'three',\n    '4': 'four',\n    '5': 'five',\n    '6': 'six',\n    '7': 'seven',\n    '8': 'eight',\n    '9': 'nine',\n  }\n  return nums[num]\n}\n\nconst Screen = (props: { count: number | string }): JSX.Element => {\n  const nums: string[] = String(props.count)\n    .split('')\n    .map(toHuman)\n\n  return (\n    <div className=\"screen\">\n      {nums.map((num, i) => (\n        <div key={i} className={`number ${num}`}>\n          <div className=\"top-left\" />\n          <div className=\"top\" />\n          <div className=\"top-right\" />\n          <div className=\"mid\" />\n          <div className=\"bottom-left\" />\n          <div className=\"bottom\" />\n          <div className=\"bottom-right\" />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst Header = (props: { bombs: number; flags: number; handleReset: () => void; status: Status; time: number }) => {\n  const { flags, status, time } = props\n  const count: string = String(time).padStart(3, '0')\n  return (\n    <header>\n      <div className=\"flags\">\n        <Screen count={flags} />\n      </div>\n      <button className=\"status\" onClick={props.handleReset}>\n        {status === statuses.READY ? '😃' : status === statuses.WIN ? '😎' : '🙁'}\n      </button>\n      <div className=\"timer\">\n        <Screen count={count} />\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport classNames from 'classnames'\nimport { Column, Row, Rows, Indices, Status } from './types'\nimport Header from './Header'\nimport { statuses } from './constants'\n\nconst Text = (props: { column: Column; status: number }): JSX.Element => (\n  <React.Fragment>\n    {props.column.show && props.column.edges > 0\n      ? props.column.edges\n      : (props.column.show || props.status !== statuses.READY) && props.column.bomb\n      ? '💣'\n      : props.column.flag\n      ? '⛳'\n      : ''}\n  </React.Fragment>\n)\n\nconst Board = (props: {\n  bombs: number\n  flags: number\n  rows: Rows\n  handleClick: (indices: Indices) => (e: React.MouseEvent<HTMLButtonElement>) => void\n  handleReset: () => void\n  status: Status\n  time: number\n}) => (\n  <div className=\"board\">\n    <Header\n      handleReset={props.handleReset}\n      bombs={props.bombs}\n      flags={props.flags}\n      status={props.status}\n      time={props.time}\n    />\n    <div className=\"grid\">\n      {props.rows.map((row: Row, i) => (\n        <div key={i} className=\"row\">\n          {row.map((column: Column, j) => (\n            <div key={`${i}-${j}`} className=\"column\">\n              <button\n                onClick={props.handleClick([i, j])}\n                className={classNames(\n                  'button',\n                  { show: column.show },\n                  { flag: column.flag },\n                  // { bomb: column.bomb },\n                  { bomb: props.status !== statuses.READY && column.bomb },\n                  { inactive: props.status !== statuses.READY },\n                )}\n              >\n                <Text column={column} status={props.status} />\n              </button>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  </div>\n)\n\nexport default Board\n","import React from 'react'\nimport classNames from 'classnames'\nimport { modals, levels } from './constants'\nimport { State, Modal, Level, LevelIndex } from './types'\n\nconst titleCase = (str: string): string => `${str[0].toUpperCase()}${str.slice(1).toLowerCase()}`\n\nconst ListItem = (props: {\n  value: LevelIndex\n  level: Level\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}) => (\n  <li>\n    <label htmlFor={props.value}>\n      <input\n        checked={props.level === levels[props.value]}\n        onChange={props.handleChange}\n        id={props.value}\n        name=\"level\"\n        type=\"radio\"\n        value={levels[props.value]}\n      />\n      {levels[props.value] === levels.BEAST ? `${titleCase(props.value)} Mode` : titleCase(props.value)}\n    </label>\n  </li>\n)\n\nconst Toolbar = (props: {\n  toggleModal: (modal: Modal) => (e: React.MouseEvent<HTMLButtonElement>) => void\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  modal: Modal\n  left: State['left']\n  level: Level\n}) => (\n  <div className=\"toolbar\">\n    <button className=\"button\" onClick={props.toggleModal(modals.OPTIONS)}>\n      Options\n    </button>\n    <button className=\"button\" onClick={props.toggleModal(modals.ABOUT)}>\n      About\n    </button>\n    <a\n      target=\"_blank\"\n      className=\"button button-right\"\n      title=\"Fork on GitHub\"\n      href=\"https://github.com/msimmer/react-minesweeper/\"\n    >\n      <img src=\"github.svg\" alt=\"GitHub Logo\" />\n    </a>\n    <div className={classNames('modal', { visible: props.modal === modals.OPTIONS })} style={{ left: props.left }}>\n      <ul>\n        {Object.keys(levels).map(value => {\n          const value_: LevelIndex = value as LevelIndex\n          return <ListItem key={value} value={value_} level={props.level} handleChange={props.handleChange} />\n        })}\n      </ul>\n    </div>\n    <div className={classNames('modal', { visible: props.modal === modals.ABOUT })} style={{ left: props.left }}>\n      Shift + Click to drop a flag\n      <br />\n      Score calculated as 3BV/s\n      <br />\n      Maxwell Simmer 2019\n    </div>\n  </div>\n)\n\nexport default Toolbar\n","import React, { ChangeEvent } from 'react'\nimport cloneDeep from 'lodash.clonedeep'\nimport { Column, MaybeColumn, Row, Rows, Regions, Indices, State, Modal, Level } from './types'\nimport Board from './Board'\nimport Toolbar from './Toolbar'\nimport { statuses, modals, levels } from './constants'\nimport './App.css'\n\n// get integer between min and max exclusive of max\nconst random = (min: number, max: number): number => {\n  const min_: number = Math.ceil(min)\n  const max_: number = Math.floor(max)\n  return Math.floor(Math.random() * (max_ - min_)) + min_\n}\n\nclass MineSweeper extends React.Component {\n  static defaultProps: State = {\n    bbbv: 0,\n    bombs: 12,\n    flags: 12,\n    rows: [],\n    size: 12,\n    status: statuses.READY,\n    start: 0,\n    time: 0,\n    timer: undefined,\n    modal: modals.NONE,\n    left: 0,\n    level: levels.EASY,\n  }\n\n  state: State = { ...MineSweeper.defaultProps }\n\n  componentWillMount() {\n    this.reset()\n  }\n\n  getTime = (): void => {\n    const { start, timer } = this.state\n    if (!timer) return\n\n    const time: State['time'] = Math.floor((Date.now() - start) / 1000)\n    if (time > 999) return\n\n    this.setState({ time })\n  }\n\n  // start the timer\n  start = (): { start: number; timer: State['timer'] } => {\n    const start: State['start'] = Date.now()\n    const timer: State['timer'] = window.setInterval(this.getTime.bind(this), 1000)\n    return { start, timer }\n  }\n\n  // stop the timer\n  stop = (): void => {\n    const { timer } = this.state\n    window.clearInterval(timer)\n  }\n\n  setRegion = (rows: Rows, [row, col]: Indices, region: number): MaybeColumn => {\n    // get the current node if it exists and set its region\n    let node: MaybeColumn = this.regionBlank(rows, [row, col])\n    if (!node) return node\n\n    node.region = region\n\n    // iterate along the X and Y axes recursively checking for blanks\n    const matrix: Indices[] = [\n      [row + 1, col], // below\n      [row - 1, col], // above\n      [row, col + 1], // right\n      [row, col - 1], // left\n    ]\n\n    let coords: Indices | undefined\n    while ((coords = matrix.shift())) {\n      if (this.regionBlank(rows, coords)) this.setRegion(rows, coords, region)\n    }\n\n    // get the siblings of the current node and update their regions. we're\n    // dilating the region to account for any tiles that would be revealed by\n    // clicking on blank tile. we resolve any overlapping tiles (edges that\n    // could be revealed by a click on different regions) by setting a flag on\n    // the node and only counting it once\n    this.assign(this.regionEdge, rows, [row, col], (node: Column) => (node.region = region))\n\n    // let our loop know that successfully found a region and can increment the\n    // counter\n    return node\n  }\n\n  // calculate the minimum required clicks to solve the board to score against\n  // the 3BV (http://www.stephan-bechtel.de/3bv.htm). we break the board down\n  // into regions that would be revealed when a blank tile is clicked, also\n  // accounting for tiles that that share an edge with blank tiles\n  getRegions = (rows: Rows, size: State['size'], bombs: State['bombs']): State['bbbv'] => {\n    const count: Regions = {}\n\n    // store regions as an index\n    let region: number = 0\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const node = this.setRegion(rows, [i, j], region)\n        if (node) region += 1\n      }\n    }\n\n    // count the tiles per region\n    for (let i = 0; i < region; i++) {\n      count[i] = rows.reduce(\n        (acc1, curr1) => acc1 + curr1.reduce((acc2, curr2) => acc2 + (curr2.region === i ? 1 : 0), 0),\n        0,\n      )\n    }\n\n    // minimum clicks required to clear all blanks\n    const blanks: number = Object.keys(count).length\n\n    // number of tiles that are either blank or would be revealed by clicking a\n    // blank beside it\n    const dilated: number = Object.values(count).reduce((acc: number, curr: number) => acc + curr, 0)\n\n    // remaining tiles that require a single click to reveal\n    const remains: number = size - dilated - bombs\n\n    // minimum required clicks to clear the board\n    const bbbv: State['bbbv'] = blanks + remains\n\n    return bbbv\n  }\n\n  reset = (): void => {\n    const { level } = this.state\n    let { bombs, flags, size } = this.state\n\n    if (level === levels.EASY) {\n      bombs = flags = size = 12\n    } else if (level === levels.MEDIUM) {\n      bombs = flags = 48\n      size = 16\n    } else if (level === levels.HARD) {\n      bombs = flags = 72\n      size = 16\n    } else if (level === levels.BEAST) {\n      bombs = flags = 192\n      size = 20\n    }\n\n    const rows: Rows = this.getRows(size, bombs)\n    const bbbv: State['bbbv'] = this.getRegions(rows, size, bombs)\n    this.stop()\n    this.setState({ ...MineSweeper.defaultProps, bombs, flags, size, bbbv, rows, level })\n  }\n\n  setBombs = (rows: Rows, size: number): Rows => {\n    const row: number = random(0, size)\n    const col: number = random(0, size)\n    const current: Column = rows[row][col]\n\n    // try again if it's already set\n    if (current.bomb === true) return this.setBombs(rows, size)\n\n    // set the bomb value on the column\n    current.bomb = true\n\n    // set the edges value on the adjacent nodes, including diagonals\n    this.assign(this.exists, rows, [row, col], (node: Column) => (node.edges += 1))\n\n    return rows\n  }\n\n  getRows = (size: State['size'], bombs: State['bombs']): Rows => {\n    const column: Column = { bomb: false, edges: 0, flag: false, reveal: false, region: null, show: false }\n    const rows: Rows = []\n\n    // create empty rows\n    for (let i = 0; i < size; i++) {\n      const columns: Row = new Array(size)\n      for (let j = 0; j < size; j++) {\n        columns[j] = { ...column }\n      }\n      rows.push(columns)\n    }\n\n    for (let i = 0; i < bombs; i++) {\n      this.setBombs(rows, size)\n    }\n\n    return rows\n  }\n\n  die = (): void => {\n    this.stop()\n    this.setState({ status: statuses.LOSE, timer: MineSweeper.defaultProps.timer })\n  }\n\n  win = (): void => {\n    this.stop()\n    this.setState({ status: statuses.WIN, timer: MineSweeper.defaultProps.timer })\n  }\n\n  // if a node exists\n  exists = (rows: Rows, [row, col]: Indices): MaybeColumn => (rows[row] && rows[row][col] ? rows[row][col] : null)\n\n  // if a node is hidden\n  hidden = (rows: Rows, [row, col]: Indices): MaybeColumn =>\n    this.exists(rows, [row, col]) && rows[row][col].reveal === false ? rows[row][col] : null\n\n  // if a node has no edges touching a bomb\n  blank = (rows: Rows, [row, col]: Indices): MaybeColumn =>\n    this.exists(rows, [row, col]) && (this.hidden(rows, [row, col]) && rows[row][col].edges < 1) ? rows[row][col] : null\n\n  // if a node is touching a bomb\n  edge = (rows: Rows, [row, col]: Indices): MaybeColumn =>\n    this.exists(rows, [row, col]) && rows[row][col].edges > 0 ? rows[row][col] : null\n\n  // if a node is blank and has not been assigned a region\n  regionBlank = (rows: Rows, [row, col]: Indices): MaybeColumn =>\n    this.exists(rows, [row, col]) &&\n    rows[row][col].region === null &&\n    rows[row][col].bomb === false &&\n    rows[row][col].edges < 1\n      ? rows[row][col]\n      : null\n\n  // if a node is an edge and has not been assigned a region\n  regionEdge = (rows: Rows, [row, col]: Indices): MaybeColumn =>\n    this.exists(rows, [row, col]) && rows[row][col].edges > 0 && rows[row][col].region === null ? rows[row][col] : null\n\n  // utility function for assigning values to orthagonal and diagonal nodes in\n  // relation to a source node at row index x col index\n  assign = (\n    conditional: (rows: Rows, [row, col]: Indices) => MaybeColumn,\n    rows: Rows,\n    [row, col]: Indices,\n    callback: (node: Column) => void,\n  ) => {\n    const matrix: Indices[] = [\n      [row + 1, col], // orthangonals\n      [row - 1, col],\n      [row, col + 1],\n      [row, col - 1],\n      [row + 1, col + 1], // diagonals\n      [row - 1, col - 1],\n      [row + 1, col - 1],\n      [row - 1, col + 1],\n    ]\n\n    let node: MaybeColumn = null\n    let coords: Indices | undefined\n    while ((coords = matrix.shift())) {\n      if ((node = conditional.call(this, rows, coords))) callback.call(this, node)\n    }\n  }\n\n  reveal = (rows: Rows, indices: Indices): Rows => {\n    const [row, col] = indices\n    const current: Column = rows[row][col]\n\n    current.reveal = true\n    if (current && current.flag === false) current.show = true\n\n    // only orthangonals\n    const matrix: Indices[] = [\n      [row + 1, col], // below\n      [row - 1, col], // above\n      [row, col + 1], // right\n      [row, col - 1], // left\n    ]\n\n    // recursively call reveal while blank tiles have edges against the selected tile\n    let coords: Indices | undefined\n    while ((coords = matrix.shift())) {\n      if (this.blank(rows, coords)) this.reveal(rows, coords)\n    }\n\n    this.assign(this.edge, rows, [row, col], (node: Column) => {\n      node.reveal = true\n      if (node && node.flag === false) node.show = true\n    })\n\n    return rows\n  }\n\n  // check to see if user wins\n  validate = (): void => {\n    const { bombs, rows, size } = this.state\n    const revealed: number = rows.reduce(\n      (acc1, curr1) => acc1 + curr1.reduce((acc2, curr2) => (acc2 += curr2.reveal ? 1 : 0), 0),\n      0,\n    )\n\n    if (size ** 2 - bombs === revealed) this.win()\n  }\n\n  handleClick = (indices: Indices) => (e: React.MouseEvent<HTMLButtonElement>): void => {\n    const { status } = this.state\n    const rows = cloneDeep(this.state.rows)\n    let { start, timer, flags } = this.state\n    const [row, col] = indices\n    const node: Column = rows[row][col]\n\n    // don't keep clicking after game is done\n    if (status !== statuses.READY) return\n\n    // get the start time and timer index from start method\n    if (!timer) ({ start, timer } = this.start())\n\n    // trying to drop a flag but none remaining, noop\n    if (e.shiftKey && flags < 1) return\n\n    // drop a flag\n    if (e.shiftKey && this.hidden(rows, indices)) {\n      const flagged: boolean = !node.flag\n      node.flag = flagged\n      flags += flagged ? -1 : 1\n      return this.setState({ flags, rows, start, timer })\n    }\n\n    // don't handle click for flagged tiles\n    if (node.flag) return\n\n    if (node.bomb) return this.die()\n\n    // edge tile\n    if (node.edges > 0) {\n      node.reveal = true\n      node.show = true\n    } else {\n      // blank tile\n      this.reveal(rows, indices)\n    }\n\n    this.setState({ rows, start, timer }, this.validate)\n  }\n\n  toggleModal = (modal: Modal) => (e: React.MouseEvent<HTMLButtonElement>): void => {\n    const modal_ = this.state.modal === modal ? modals.NONE : modal\n    this.setState({ modal: modal_, left: e.currentTarget.offsetLeft })\n  }\n\n  handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const level: Level = Number(e.currentTarget.value)\n    this.setState({ level }, () => this.reset())\n  }\n\n  render(): JSX.Element {\n    const { modal, left, level } = this.state\n    return (\n      <div className=\"page\">\n        <div className=\"frame\">\n          <Toolbar\n            toggleModal={this.toggleModal}\n            handleChange={this.handleChange}\n            modal={modal}\n            left={left}\n            level={level}\n          />\n          <Board handleClick={this.handleClick} handleReset={this.reset} {...this.state} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MineSweeper\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}